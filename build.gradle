plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

group = 'io.github.bluesheep2804'
version = '3.0.0'

java {
    archivesBaseName = 'JAOPCAExtras-1.20.1'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'official', version: '1.20.1'
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                jaopcaextras {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', 'jaopcaextras'
        }

        server {
            property 'forge.enabledGameTestNamespaces', 'jaopcaextras'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'jaopcaextras'
        }

        data {
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'jaopcaextras', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://modmaven.dev/"
        content {
            includeGroup "appeng"
        }
    }
    maven {
        url "https://maven.tterrag.com/"
        content {
            includeGroup "com.simibubi.create"
        }
    }
}

dependencies {
    minecraft 'net.neoforged:forge:1.20.1-47.1.75'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("curse.maven:jaopca-266936:4742609")

    implementation fg.deobf("mezz.jei:jei-1.20.1-forge:15.2.0.27")

    implementation fg.deobf("appeng:appliedenergistics2-forge:15.0.10")
    // runtimeOnly fg.deobf("curse.maven:lazierae2-489843:4145521")

    // for debug
//    runtimeOnly fg.deobf("curse.maven:cofh-69162:4385216")
//    runtimeOnly fg.deobf("curse.maven:thermalfoundation-222880:4382373")
//    runtimeOnly fg.deobf("curse.maven:thermalexpansion-69163:4382371")
//    runtimeOnly fg.deobf("mekanism:Mekanism:1.19.2-10.3.8.477")
    runtimeOnly fg.deobf("com.simibubi.create:create-1.20.1:0.5.1.d-9:all") {
        transitive = false
    }
    runtimeOnly fg.deobf("curse.maven:ato-405593:4590570")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "JAOPCAExtras",
                "Specification-Vendor"    : "BlueSheep2804",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "BlueSheep2804",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
